1:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
2:HL["/_next/static/css/8d2a8dc44e2b7a2e.css","style",{"crossOrigin":""}]
0:["hwQUiY9TH7Ld7WaQ6wcqo",[[["",{"children":["posts",{"children":[["id","llvm_playground_1","d"],{"children":["__PAGE__?{\"id\":\"llvm_playground_1\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8d2a8dc44e2b7a2e.css","precedence":"next","crossOrigin":""}]],"$L4"]]]]
5:I[6954,[],""]
6:I[7264,[],""]
9:I[8187,["986","static/chunks/986-77351ce039fbbc1a.js","185","static/chunks/app/layout-87d2b172080349b5.js"],""]
3:[null,["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","a",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","llvm_playground_1","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L7","$L8",null],"segment":"__PAGE__?{\"id\":\"llvm_playground_1\"}"},"styles":[]}],"segment":["id","llvm_playground_1","d"]},"styles":[]}],"segment":"posts"},"styles":[]}]}],["$","$L9",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]}]]}]}],null]
a:T3590,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#installing-llvm">Installing llvm</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#configuring-cmake">Configuring CMake</a></li></ol></nav><p>Hi everyone, it's Jasmine here, or <code>badumbatish</code>.</p>
<p>Inspired by mcyoung's llvm ir blog and sha4dy's learning llvm blog, I think it'd be great to write some kind of similar blog posts, albeit I'm still learning :)</p>
<p>In this blog post, let's try to get a minimal running example of LLVM running/</p>
<p>We'll get started by installing LLVM, write a CMakeLists.txt to build our code, and create a main.cpp to generate
a <code>main</code> function that returns 0</p>
<h2 id="installing-llvm"><a href="#installing-llvm">Installing llvm</a></h2>
<p>LLVM is a very well-known compiler framework so chances are you wouldn't have to build it from source and just install it from your favorite package manager.</p>
<p>On my MacOS, I'll use homebrew to install llvm</p>
<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">brew</span><span style="color:#ADD7FF"> install</span><span style="color:#ADD7FF"> llvm</span></span>
<span class="line"></span></code></pre>
<p>On MacOS, for some reason CMake fails to recognize and find LLVm via <code>find_package()</code> so
you would have to configure it with some extra steps</p>
<p>Then when you run</p>
<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">brew</span><span style="color:#ADD7FF"> info</span><span style="color:#ADD7FF"> llvm</span></span>
<span class="line"></span></code></pre>
<p>It'll spit out some extra information about linking flags for you</p>
<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">➜</span><span style="color:#ADD7FF">  badumbatish.github.io</span><span style="color:#ADD7FF"> git:</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">main</span><span style="color:#A6ACCD">) </span><span style="color:#ADD7FF">✗</span><span style="color:#ADD7FF"> brew</span><span style="color:#ADD7FF"> info</span><span style="color:#ADD7FF"> llvm</span></span>
<span class="line"><span style="color:#ADD7FF">==</span><span style="color:#A6ACCD">> </span><span style="color:#ADD7FF">llvm:</span><span style="color:#ADD7FF"> stable</span><span style="color:#5DE4C7"> 18.1.8</span><span style="color:#A6ACCD"> (bottled), HEAD [keg-only]</span></span>
<span class="line"><span style="color:#91B4D5">Next-gen</span><span style="color:#ADD7FF"> compiler</span><span style="color:#ADD7FF"> infrastructure</span></span>
<span class="line"><span style="color:#91B4D5">https://llvm.org/</span></span>
<span class="line"><span style="color:#91B4D5">Installed</span></span>
<span class="line"><span style="color:#91B4D5">/opt/homebrew/Cellar/llvm/18.1.8</span><span style="color:#A6ACCD"> (7,722 </span><span style="color:#ADD7FF">files,</span><span style="color:#ADD7FF"> 1.8GB</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#91B4D5">  Poured</span><span style="color:#ADD7FF"> from</span><span style="color:#ADD7FF"> bottle</span><span style="color:#ADD7FF"> using</span><span style="color:#ADD7FF"> the</span><span style="color:#ADD7FF"> formulae.brew.sh</span><span style="color:#ADD7FF"> API</span><span style="color:#ADD7FF"> on</span><span style="color:#ADD7FF"> 2024-07-01</span><span style="color:#ADD7FF"> at</span><span style="color:#ADD7FF"> 16:36:01</span></span>
<span class="line"><span style="color:#91B4D5">From:</span><span style="color:#ADD7FF"> https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/l/llvm.rb</span></span>
<span class="line"><span style="color:#91B4D5">License:</span><span style="color:#ADD7FF"> Apache-2.0</span><span style="color:#ADD7FF"> with</span><span style="color:#ADD7FF"> LLVM-exception</span></span>
<span class="line"><span style="color:#ADD7FF">==</span><span style="color:#A6ACCD">> </span><span style="color:#ADD7FF">Dependencies</span></span>
<span class="line"><span style="color:#91B4D5">Build:</span><span style="color:#ADD7FF"> cmake</span><span style="color:#ADD7FF"> ✘,</span><span style="color:#ADD7FF"> ninja</span><span style="color:#ADD7FF"> ✔,</span><span style="color:#ADD7FF"> swig</span><span style="color:#ADD7FF"> ✘</span></span>
<span class="line"><span style="color:#91B4D5">Required:</span><span style="color:#ADD7FF"> python@3.12</span><span style="color:#ADD7FF"> ✔,</span><span style="color:#ADD7FF"> xz</span><span style="color:#ADD7FF"> ✔,</span><span style="color:#ADD7FF"> z3</span><span style="color:#ADD7FF"> ✔,</span><span style="color:#ADD7FF"> zstd</span><span style="color:#ADD7FF"> ✔</span></span>
<span class="line"><span style="color:#ADD7FF">==</span><span style="color:#A6ACCD">> </span><span style="color:#ADD7FF">Options</span></span>
<span class="line"><span style="color:#91B4D5">--HEAD</span></span>
<span class="line"><span style="color:#91B4D5">        Install</span><span style="color:#ADD7FF"> HEAD</span><span style="color:#ADD7FF"> version</span></span>
<span class="line"><span style="color:#ADD7FF">==</span><span style="color:#A6ACCD">> </span><span style="color:#ADD7FF">Caveats</span></span>
<span class="line"><span style="color:#91B4D5">To</span><span style="color:#ADD7FF"> use</span><span style="color:#ADD7FF"> the</span><span style="color:#ADD7FF"> bundled</span><span style="color:#ADD7FF"> libc++</span><span style="color:#ADD7FF"> please</span><span style="color:#ADD7FF"> add</span><span style="color:#ADD7FF"> the</span><span style="color:#ADD7FF"> following</span><span style="color:#ADD7FF"> LDFLAGS:</span></span>
<span class="line"><span style="color:#E4F0FB">  LDFLAGS</span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">-L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++</span><span style="color:#A6ACCD">"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">llvm</span><span style="color:#ADD7FF"> is</span><span style="color:#ADD7FF"> keg-only,</span><span style="color:#ADD7FF"> which</span><span style="color:#ADD7FF"> means</span><span style="color:#ADD7FF"> it</span><span style="color:#ADD7FF"> was</span><span style="color:#ADD7FF"> not</span><span style="color:#ADD7FF"> symlinked</span><span style="color:#ADD7FF"> into</span><span style="color:#ADD7FF"> /opt/homebrew,</span></span>
<span class="line"><span style="color:#91B4D5">because</span><span style="color:#ADD7FF"> macOS</span><span style="color:#ADD7FF"> already</span><span style="color:#ADD7FF"> provides</span><span style="color:#ADD7FF"> this</span><span style="color:#ADD7FF"> software</span><span style="color:#ADD7FF"> and</span><span style="color:#ADD7FF"> installing</span><span style="color:#ADD7FF"> another</span><span style="color:#ADD7FF"> version</span><span style="color:#ADD7FF"> in</span></span>
<span class="line"><span style="color:#91B4D5">parallel</span><span style="color:#ADD7FF"> can</span><span style="color:#ADD7FF"> cause</span><span style="color:#ADD7FF"> all</span><span style="color:#ADD7FF"> kinds</span><span style="color:#ADD7FF"> of</span><span style="color:#ADD7FF"> trouble.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">If</span><span style="color:#ADD7FF"> you</span><span style="color:#ADD7FF"> need</span><span style="color:#ADD7FF"> to</span><span style="color:#ADD7FF"> have</span><span style="color:#ADD7FF"> llvm</span><span style="color:#ADD7FF"> first</span><span style="color:#ADD7FF"> in</span><span style="color:#ADD7FF"> your</span><span style="color:#ADD7FF"> PATH,</span><span style="color:#ADD7FF"> run:</span></span>
<span class="line"><span style="color:#91B4D5">  echo</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">export PATH="/opt/homebrew/opt/llvm/bin:$PATH"</span><span style="color:#A6ACCD">'</span><span style="color:#91B4D5"> >></span><span style="color:#ADD7FF"> ~/.zshrc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">For</span><span style="color:#ADD7FF"> compilers</span><span style="color:#ADD7FF"> to</span><span style="color:#ADD7FF"> find</span><span style="color:#ADD7FF"> llvm</span><span style="color:#ADD7FF"> you</span><span style="color:#ADD7FF"> may</span><span style="color:#ADD7FF"> need</span><span style="color:#ADD7FF"> to</span><span style="color:#ADD7FF"> set:</span></span>
<span class="line"><span style="color:#5DE4C7">  export</span><span style="color:#E4F0FB"> LDFLAGS</span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">-L/opt/homebrew/opt/llvm/lib</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#5DE4C7">  export</span><span style="color:#E4F0FB"> CPPFLAGS</span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">-I/opt/homebrew/opt/llvm/include</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#ADD7FF">==</span><span style="color:#A6ACCD">> </span><span style="color:#ADD7FF">Analytics</span></span>
<span class="line"><span style="color:#91B4D5">install:</span><span style="color:#ADD7FF"> 74,089</span><span style="color:#A6ACCD"> (30 </span><span style="color:#ADD7FF">days</span><span style="color:#A6ACCD">), 216,506 (</span><span style="color:#91B4D5">90</span><span style="color:#ADD7FF"> days</span><span style="color:#A6ACCD">), 602,102 (</span><span style="color:#91B4D5">365</span><span style="color:#ADD7FF"> days</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#91B4D5">install-on-request:</span><span style="color:#ADD7FF"> 34,994</span><span style="color:#A6ACCD"> (30 </span><span style="color:#ADD7FF">days</span><span style="color:#A6ACCD">), 109,493 (</span><span style="color:#91B4D5">90</span><span style="color:#ADD7FF"> days</span><span style="color:#A6ACCD">), 314,945 (</span><span style="color:#91B4D5">365</span><span style="color:#ADD7FF"> days</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#91B4D5">build-error:</span><span style="color:#5DE4C7"> 727</span><span style="color:#A6ACCD"> (30 </span><span style="color:#ADD7FF">days</span><span style="color:#A6ACCD">)</span></span>
<span class="line"></span></code></pre>
<h2 id="configuring-cmake"><a href="#configuring-cmake">Configuring CMake</a></h2>
<p>Make sure you have your CMake installed :)
Open up your terminal and run</p>
<pre><code>touch CMakeLists.txt
</code></pre>
<p>to create a CMakeLists.txt file
Now, by running the following code, CMake will be able to detect your llvm installation (on MacOS)</p>
<pre><code>echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> ~/.zshrc \
&#x26;&#x26;  export LDFLAGS="-L/opt/homebrew/opt/llvm/lib" \
&#x26;&#x26;  export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
</code></pre>
<p>It's not the cleanest way to handle these things, but when you're hacking around, it should be good enough.</p>
<p>Now for your CMakeLists.txt</p>
<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">cmake_minimum_required(VERSION 3.22)</span></span>
<span class="line"><span style="color:#A6ACCD">project(llvm_playground) </span></span>
<span class="line"><span style="color:#A6ACCD">find_package(LLVM REQUIRED CONFIG)</span></span>
<span class="line"><span style="color:#A6ACCD">set(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"><span style="color:#A6ACCD">set(CMAKE_CXX_STANDARD_REQUIRED ON)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">include(AddLLVM)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)</span></span>
<span class="line"></span></code></pre>
<p>Now run</p>
<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">cmake</span><span style="color:#ADD7FF"> -S</span><span style="color:#ADD7FF"> .</span><span style="color:#ADD7FF"> -B</span><span style="color:#ADD7FF"> build</span><span style="color:#A6ACCD"> &#x26;&#x26; </span><span style="color:#91B4D5">cmake</span><span style="color:#ADD7FF"> --build</span><span style="color:#ADD7FF"> build</span></span>
<span class="line"></span></code></pre>
<p>to use cmake to build using the CMakelists.txt script we have create in the current folder and build all the artifacts in the <code>build</code> folder</p>
<p>before adding these two lines that will help us build our <code>main.cpp</code></p>
<pre><code>add_llvm_executable(main main.cpp)
target_include_directories(main ${LLVM_INCLUDE_DIRS})
</code></pre>
<p>and for your main.cpp, we'll try to use llvm to create a function <code>main()</code> that returns an int of 0 to generate LLVM IR and then use LLVM's llc to compile it into an object file and use clang to compile that object file to an executable :)</p>
<p>It will be fun :)</p>
<p>First create your <code>main.cpp</code>,</p>
<p>we'll first include our necessary header</p>
<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"></span></code></pre>8:["$","article",null,{"className":"p-8 prose  max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"Jasmine's llvm playground - 1"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"2024-07-13"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$a"}}]]}]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Jasmine's llvm playground - 1"}],["$","meta","2",{"name":"description","content":"Built with NextJS, TailwindCSS, and a tonnn of loveee :)"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/_next/static/media/pfp3.5cd65164.png"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:null
