1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-ad05a37061268ac6.js","565","static/chunks/565-d3001cb0b7ac580c.js","177","static/chunks/app/layout-5c184bc8512acba2.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
5:I[1168,["173","static/chunks/173-ad05a37061268ac6.js","565","static/chunks/565-d3001cb0b7ac580c.js","177","static/chunks/app/layout-5c184bc8512acba2.js"],"default"]
7:I[6213,[],"OutletBoundary"]
9:I[6213,[],"MetadataBoundary"]
b:I[6213,[],"ViewportBoundary"]
d:I[4835,[],""]
:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/_next/static/css/8ea1f83665c47ed9.css","style"]
:HL["/_next/static/css/7ad14cf05ba66ef7.css","style"]
0:{"P":null,"b":"FfM5fjhaLaFY3nIXGEeXI","p":"","c":["","posts","going_to_mlir_gym_2"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","going_to_mlir_gym_2","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8ea1f83665c47ed9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":[["$","p",null,{"children":"I'm looking for new grad compiler work, please email at jjasmine@berkeley.edu"}],["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","going_to_mlir_gym_2","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7ad14cf05ba66ef7.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","QBjvdLyiaIeW54IZzPwVF",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:T51b7,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#prologue">Prologue</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#reader-supporting-section">Reader supporting section</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#introduction">Introduction</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#planning">Planning</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#differences">Differences</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#steps">Steps</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#live-intervals">Live intervals</a></li></ol></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#algorithm">Algorithm</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#topo-sort-with-loop-continuity">Topo sort with loop continuity</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#building-live-intervals">Building live intervals</a></li></ol></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#obstacles">Obstacles</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#resources">Resources</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#papers">Papers</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#textbooks">Textbooks</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#ai-tools">AI tools</a></li></ol></li></ol></nav><p><a href="https://www.youtube.com/watch?v=zAgVtzhjfCA&#x26;ab_channel=SabrinaCarpenter-Topic" rel="nofollow" target="_blank">Please, please, please</a> don't read
it now. It's unfinished, and I'm not sure if it'll go into impl or design doc :)</p>
<p>todo:</p>
<ul>
<li>Bold SS text</li>
<li>Add live interval, live ranges explanation. When add, explain why</li>
<li>Add first step of lin scan reg</li>
</ul>
<h2 id="prologue"><a aria-hidden="true" tabindex="-1" href="#prologue"><span class="icon icon-link"></span></a>Prologue</h2>
<p>Hi everyone, I hope everybody's been great :) I hope you like my last report for my graduate class <a href="https://badumbatish.github.io/posts/going_to_mlir_gym_1" rel="nofollow" target="_blank">here</a>. This article is also related to the same project. It
discusses the
SSA linear scan
register
allocation algorithm and the steps taken to implement it.</p>
<p>Just like the last MLIR report post, I also include a supporting section (SS) right before the introduction for
unfamiliar
reader in the compiler space.</p>
<p>Without reading the SS, I assume interested readers are familiar with some basic middle-end IR concepts (e.g <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>
notation, liveness analysis, loops).</p>
<p>With reading the SS, there is some context from the last report's <a href="https://badumbatish.github.io/posts/going_to_mlir_gym_1#reader-supporting-section" rel="nofollow" target="_blank">SS</a> that I think would be helpful.</p>
<p>And as is tradition, I also wanna share a <a href="https://www.youtube.com/watch?v=5HFyoxqUi0g&#x26;ab_channel=CROWONHYENAS" rel="nofollow" target="_blank">song</a> for
you to listen to while reading. Initially it was between this song and <a href="https://www.youtube.com/watch?v=y-LKgloPswQ&#x26;ab_channel=hazardclique" rel="nofollow" target="_blank">that</a> song. What can I say? I guess this is a long form way to say I want you to listen to
both :)</p>
<p>I hope everybody enjoys :)</p>
<h2 id="reader-supporting-section"><a aria-hidden="true" tabindex="-1" href="#reader-supporting-section"><span class="icon icon-link"></span></a>Reader supporting section</h2>
<p></p><details><summary>Open Reader supporting section</summary><p></p>
<ul>
<li>
<p>Dominance: In a CFG, with the entry basic block <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><msub><mi>B</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">BB_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and any two basic block A and B, if all paths from
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><msub><mi>B</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">BB_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to B goes through A, then A is said to dominate B. The notation for dominance is A
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≫</mo></mrow><annotation encoding="application/x-tex">\gg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">≫</span></span></span></span> B and every node is said to dominate itself.</p>
</li>
<li>
<p>Dataflow analysis: Abstractly, dataflow analysis is a way to understand how data moves and changes throughout a
computer program.
It helps us track what happens to different values (like variables) as the program runs from start to finish.</p>
</li>
</ul>
<p>For example, when <a href="https://en.wikipedia.org/wiki/Reaching_definition" rel="nofollow" target="_blank">reaching definition</a> is
run, the compiler can detect if some variable is possibly uninitialized and warn us if such cases appear:</p>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#CA9EE6">fn</span><span style="color:#8CAAEE;font-style:italic"> reaching_def_example</span><span style="color:#949CBB">(</span><span style="color:#EA999C">condition</span><span style="color:#81C8BE">:</span><span style="color:#E5C890;font-style:italic"> bool</span><span style="color:#949CBB">)</span><span style="color:#949CBB"> {</span></span>
<span class="line"><span style="color:#CA9EE6">    let</span><span style="color:#C6D0F5"> x</span><span style="color:#81C8BE">:</span><span style="color:#CA9EE6"> i32</span><span style="color:#949CBB">;</span><span style="color:#737994;font-style:italic"> // x is declared but not initialized</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CA9EE6">    if</span><span style="color:#C6D0F5"> condition </span><span style="color:#949CBB">{</span><span style="color:#737994;font-style:italic"> // if this `if` condition is `false`,</span></span>
<span class="line"><span style="color:#C6D0F5">       x </span><span style="color:#81C8BE">=</span><span style="color:#EF9F76"> 5</span><span style="color:#949CBB">;</span><span style="color:#737994;font-style:italic">      // `x` is not initialized</span></span>
<span class="line"><span style="color:#949CBB">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8CAAEE;font-style:italic">    println!</span><span style="color:#949CBB">(</span><span style="color:#A6D189">"</span><span style="color:#949CBB">{}</span><span style="color:#A6D189">"</span><span style="color:#949CBB">,</span><span style="color:#C6D0F5"> x</span><span style="color:#949CBB">);</span><span style="color:#737994;font-style:italic"> // Warning: x might be uninitialized</span></span>
<span class="line"><span style="color:#737994;font-style:italic">                      // if condition is false</span></span>
<span class="line"><span style="color:#949CBB">}</span></span></code></pre>
<ul>
<li>Loop header: In hand with dominance, a block is said to be a loop header if it dominates one of its
predecessors (a block that points to it). Knowing what a loop header is, and later identifying it would be of great
help in
our live intervals (of our linear register allocator) construction. As in the paper by Wimmer and Franz, their live
intervals construction bypasses the dataflow analysis cost itself, simply on the concept of dominance and loop header.</li>
</ul>
<p>Before heading further, let's look at an example for the two concepts.</p>
<p>In this control flow graph, A dominates every BB, including itself.
B dominates D; even though there is a path from
D to B, it must have first passed from B first. Since B dominates its predecessor, B is a loop header; hence,
there is a loop :)</p>
<p>D is:
<img src="/blogs/dominance_mlir_gym_2.svg" alt="dominance_mlir_gym_2.svg"></p>
<ul>
<li>
<p>Live range: (TODO: derrive from eng a comp)</p>
</li>
<li>
<p>Live interval: (TODO: ordered linked list kinda thing)</p>
</li>
</ul>
<p></p></details><p></p>
<h2 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><span class="icon icon-link"></span></a>Introduction</h2>
<p>Register allocation is an important aspect in the compiler construction phase.
Registers being the fastest
(but most limited) in the memory hierarchy, the compiler's register allocator must be strategic about this
resource, more usages in registers instead of the stack means reduced latency and
improved execution speed.</p>
<p>In the case of our recompiler, the main motivation related to obfuscation. <a href="https://farena.in/" rel="nofollow" target="_blank">Edu</a>'s employer,
<a href="https://www.quarkslab.com/" rel="nofollow" target="_blank">Quarkslab</a> is interested in applying obfuscation method to DEX files. With the methods
generating a lot of virtual registers, there were concerns about it exceeding the limit of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup><mo>=</mo><mn>65</mn><mo separator="true">,</mo><mn>536</mn></mrow><annotation encoding="application/x-tex">2^{16} = 65,536</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">65</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">536</span></span></span></span> virtual
registers. In this case, the linear register allocation project helps bring down the number of virtual registers under
the limit (of course they can just run less obfuscation hahahah).</p>
<p>Personally, this is also another opportunity for me to improve my compiler arsenal. Most undergraduate compiler
classes leave this part out or only as part of a pen and paper exercise; knowing how to perform register allocation
(and writing about it)
would be a big push in the direction.</p>
<p>All discussed concepts are driven from the links in the resources section.</p>
<h2 id="planning"><a aria-hidden="true" tabindex="-1" href="#planning"><span class="icon icon-link"></span></a>Planning</h2>
<h3 id="differences"><a aria-hidden="true" tabindex="-1" href="#differences"><span class="icon icon-link"></span></a>Differences</h3>
<p>We're planning to improve the lowering of MjolnIR to smali. What this means is that instead of lowering directly
from SSA variables to virtual registers with
<span class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#CA9EE6">template</span><span style="color:#949CBB">&#x3C;</span><span style="color:#CA9EE6">class</span><span style="color:#E5C890;font-style:italic"> Aspect</span><span style="color:#949CBB">></span><span style="color:#CA9EE6"> class</span><span style="color:#E5C890;font-style:italic"> SmaliCounter</span></span></code></span>, we lower indirectly with our register
allocation.</p>
<p>More specifically, we'll :</p>
<ul>
<li>Map from one SSA value to a live interval.</li>
<li>Optionally merge <code>compatible</code> live intervals together (this process is called coalescing).</li>
<li>Lower down to virtual registers.</li>
</ul>
<p>This new process introduces new stages that are clearly described and compared through this diagram.</p>
<p>[todo add mermaid here]</p>
<h3 id="steps"><a aria-hidden="true" tabindex="-1" href="#steps"><span class="icon icon-link"></span></a>Steps</h3>
<p>To say that linear register allocation simply comprises 3 steps is a simplification. The three big steps eventually
breaks down into substeps when a reader starts asking these questions of the sort: Where and how do
we get our live intervals? How do we map SSA value to said interval? What mechanics helps us merge <code>compatible</code>? How is
MLIR helping here?</p>
<h4 id="live-intervals"><a aria-hidden="true" tabindex="-1" href="#live-intervals"><span class="icon icon-link"></span></a>Live intervals</h4>
<ul>
<li>
<p>scc iterator : <a href="https://llvm.org/doxygen/classllvm_1_1scc__iterator.html" rel="nofollow" target="_blank">https://llvm.org/doxygen/classllvm_1_1scc__iterator.html</a></p>
</li>
<li>
<p>mlir gets block sorted by dominance (not enough, not strict enough ordering)</p>
</li>
<li>
<p>need to also detect loop
<a href="https://pages.cs.wisc.edu/~fischer/cs701.f14/finding.loops.html" rel="nofollow" target="_blank">https://pages.cs.wisc.edu/~fischer/cs701.f14/finding.loops.html</a></p>
</li>
</ul>
<p>The procedure will be</p>
<ul>
<li>
<p>Linearize the blocks of CFG based on dominance, with blocks in the loop being the same.</p>
</li>
<li>
<p>Construct the live ranges (with live holes).</p>
</li>
<li>
<p>Construct the</p>
</li>
</ul>
<h3 id="algorithm"><a aria-hidden="true" tabindex="-1" href="#algorithm"><span class="icon icon-link"></span></a>Algorithm</h3>
<h4 id="topo-sort-with-loop-continuity"><a aria-hidden="true" tabindex="-1" href="#topo-sort-with-loop-continuity"><span class="icon icon-link"></span></a>Topo sort with loop continuity</h4>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#CA9EE6">auto</span><span style="color:#C6D0F5"> topo_blocks </span><span style="color:#81C8BE">=</span><span style="color:#C6D0F5"> mlir get blocks sorted by dom</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#CA9EE6">auto</span><span style="color:#C6D0F5"> order </span><span style="color:#81C8BE">=</span><span style="color:#C6D0F5"> map that maps order to block</span></span>
<span class="line"><span style="color:#CA9EE6">auto</span><span style="color:#C6D0F5"> result </span><span style="color:#81C8BE">=</span><span style="color:#949CBB"> {};</span></span>
<span class="line"><span style="color:#CA9EE6">for</span><span style="color:#C6D0F5"> each block b in topo_block</span></span>
<span class="line"><span style="color:#CA9EE6">    if</span><span style="color:#C6D0F5"> already in result</span></span>
<span class="line"><span style="color:#CA9EE6">        continue</span></span>
<span class="line"><span style="color:#CA9EE6">    else</span></span>
<span class="line"><span style="color:#CA9EE6">        if</span><span style="color:#C6D0F5"> exist a back edge from e to b</span></span>
<span class="line"></span>
<span class="line"></span></code></pre>
<h4 id="building-live-intervals"><a aria-hidden="true" tabindex="-1" href="#building-live-intervals"><span class="icon icon-link"></span></a>Building live intervals</h4>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#CA9EE6">using</span><span style="color:#E5C890;font-style:italic"> LiveRange</span><span style="color:#81C8BE"> =</span><span style="color:#E5C890"> std</span><span style="color:#949CBB">::</span><span style="color:#E5C890;font-style:italic">pair</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#E5C890;font-style:italic">DenseMap</span><span style="color:#949CBB">&#x3C;</span><span style="color:#E5C890;font-style:italic">Value</span><span style="color:#949CBB">,</span><span style="color:#E5C890;font-style:italic"> Vector</span><span style="color:#949CBB">&#x3C;</span><span style="color:#E5C890;font-style:italic">LiveRange</span><span style="color:#949CBB">>></span><span style="color:#8CAAEE;font-style:italic"> build_intervals</span><span style="color:#949CBB">(</span><span style="color:#E5C890;font-style:italic">MethodOp</span><span style="color:#EA999C;font-style:italic"> op</span><span style="color:#949CBB">)</span><span style="color:#949CBB"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#949CBB">}</span></span></code></pre>
<h2 id="obstacles"><a aria-hidden="true" tabindex="-1" href="#obstacles"><span class="icon icon-link"></span></a>Obstacles</h2>
<h2 id="resources"><a aria-hidden="true" tabindex="-1" href="#resources"><span class="icon icon-link"></span></a>Resources</h2>
<h3 id="papers"><a aria-hidden="true" tabindex="-1" href="#papers"><span class="icon icon-link"></span></a>Papers</h3>
<ul>
<li><a href="https://link.springer.com/content/pdf/10.1007/3-540-45937-5_17.pdf" rel="nofollow" target="_blank">Linear Scan Register Allocation in the Context of SSA Form and Register Constraints</a> - Hanspeter Mössenböck and Michael Pfeiffer.</li>
<li><a href="http://www.christianwimmer.at/Publications/Wimmer10a/Wimmer10a.pdf" rel="nofollow" target="_blank">Linear Scan Register Allocation on SSA Form</a> -
Christian Wimmer and Michael Franz.</li>
<li><a href="https://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf" rel="nofollow" target="_blank">Linear Scan Register Allocation</a> - Massimiliano
Poletto and Vivek Sarkar.</li>
</ul>
<h3 id="textbooks"><a aria-hidden="true" tabindex="-1" href="#textbooks"><span class="icon icon-link"></span></a>Textbooks</h3>
<ul>
<li><a href="https://www.goodreads.com/book/show/60277251-engineering-a-compiler" rel="nofollow" target="_blank">Engineering a Compiler</a> - Keith D. Cooper and Linda Torczon.</li>
</ul>
<h3 id="ai-tools"><a aria-hidden="true" tabindex="-1" href="#ai-tools"><span class="icon icon-link"></span></a>AI tools</h3>
<p>Hahahaha you're really funny.</p>6:["$","article",null,{"className":"p-8 prose  max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"[ONGOING] Going to the gym with MLIR: Linear register allocation for ... a stackless virtual machine?"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"8888-08-08"}]}],["$","div",null,{"className":"flex font-bold","children":"Edit:"}],"My resume is ",["$","a",null,{"href":"https://www.overleaf.com/project/638120c30d0003f7bfe10360","children":"here"}]," (and downloadable ",["$","a",null,{"href":"https://badumbatish.github.io/about_me/Jasmine_Resume_Badumbatish.pdf","children":"here"}],"). If you know of a compiler related job posting, please feel free to contact me or refer me at either ",["$","a",null,{"href":"tanghocle456@gmail.com","children":"tanghocle456@gmail.com"}]," or ",["$","a",null,{"href":"jjasmine@berkeley.edu","children":"jjasmine@berkeley.edu"}],".",["$","hr",null,{}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[ONGOING] Going to the gym with MLIR: Linear register allocation for ... a stackless virtual machine?"}],["$","meta","2",{"name":"description","content":"Built with NextJS, TailwindCSS, and a tonnn of loveee :)"}],["$","link","3",{"rel":"icon","href":"/_next/static/media/pfp3.5cd65164.png"}]]
8:null
