3:"$Sreact.fragment"
4:I[4839,["839","static/chunks/839-4366cacede800037.js","565","static/chunks/565-d106929a3b04f825.js","177","static/chunks/app/layout-95398f2090e45e4b.js"],""]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[1168,["839","static/chunks/839-4366cacede800037.js","565","static/chunks/565-d106929a3b04f825.js","177","static/chunks/app/layout-95398f2090e45e4b.js"],"default"]
9:I[6213,[],"OutletBoundary"]
b:I[6213,[],"MetadataBoundary"]
d:I[6213,[],"ViewportBoundary"]
f:I[4835,[],""]
1:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
2:HL["/_next/static/css/166b80320d28fa0e.css","style"]
0:{"P":null,"b":"tqnMgJsclCOCflMxp-aXM","p":"","c":["","posts","going_to_mlir_gym_1"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","going_to_mlir_gym_1","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$3","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/166b80320d28fa0e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L4",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","$L7",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":[["$","p",null,{"children":"I'm looking for new grad compiler work, please email at jjasmine@berkeley.edu"}],["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]]}]]}]}]]}],{"children":["posts",["$","$3","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["id","going_to_mlir_gym_1","d"],["$","$3","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$3","c",{"children":["$L8",null,["$","$L9",null,{"children":"$La"}]]}],{},null]},null]},null]},null],["$","$3","h",{"children":[null,["$","$3","LGlP_zMvG14aKgz4DXo0y",{"children":[["$","$Lb",null,{"children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust"}]]}]]}]]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
10:T2693,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#prologue">Prologue</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#introduction">Introduction</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#planning">Planning</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#mlirs-operations-and-values">MLIR's operations and values</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#operations">Operations</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#values">Values</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#parsing-cmdline-and-cmake">Parsing, cmdline and cmake</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#non-mlir-non-ssa-cfg-to-mlir-ssa-cfg">Non-MLIR, NON-SSA CFG to MLIR-SSA CFG</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#optimization">Optimization</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#translation">Translation</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#other-contributions-to-project">Other contributions to project</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#future-work">Future work</a></li></ol></nav><h2 id="prologue"><a href="#prologue">Prologue</a></h2>
<p>Hi there, I hope everyone's having a great day, this article is about utilizing MLIR in analysing and optimizing the <a href="https://source.android.com/docs/core/runtime/dalvik-bytecode">DEX</a> format.</p>
<p>The blog will be divided into multiple posts. This first one is intended for submission for <a href="https://www2.eecs.berkeley.edu/Courses/CS265/">CS265</a> <a href="https://github.com/mwillsey/cs265">here</a>, while successive posts goes into more depth about implementation details and act somewhat as a tutorial than a project report.</p>
<h2 id="introduction"><a href="#introduction">Introduction</a></h2>
<p>The MLIR project from the LLVM framework provides a framework for building reusable and extensible compiler infrastructure. New intermediate representation can be created and used within the framework itself, allowing for a unified handling of different IRs within the same framework.</p>
<p>In the case of the library <a href="https://github.com/Shuriken-Group/Shuriken-Analyzer">Shuriken</a> from <a href="https://github.com/Shuriken-Group">Shuriken Group</a> for Dalvik Executable (DEX) file analysis, we can leverage the MLIR by extending a somewhat 1-to-1 mapping of DEX to MLIR, the newly created IR (MjolnIR), allowing us to use the much more mature framework for analyzing the binary itself. As DEX is used as a mean for transportation from a server to an android device where it is compiled into ART for installation, being able to optimize the bytecode size of dex allows us to save cost on networking as well as server and android device's storage cost.</p>
<p>In the future, MjolnIR will be used in optimization, obsfucating, deobsfucating the Dalvik Machine Bytecode.</p>
<p>This blog post wouldn't be possible without the guidance of Eduardo (Edu) Blázquez González (Fare9), (<a href="https://farena.in/">Eduardo</a>), a PhD doctorate and a compiler engineer at Quarkslab in developing, lifting and lowering the IR.</p>
<p>Edu's the one that reached out to me on twitter to befriend me :) We chatted about compilers and stuff and later he introduced me to the codebase.
He helps me with understanding the codebase infrastructure, together with emotional support and mlir contributions hahahah :)</p>
<p>I am also grateful to <a href="https://www.mwillsey.com/">Max Willsey</a>, the professor of the compiler graduate class CS265, for allowing me, an undergraduate to enroll as well as guiding me on the direction of the project.
Throughout the semester, there were some assignments where I fell behind. I know that opportunities are hard to come by and I really took every lesson to heart.</p>
<p>New information tidbits will come around in different sections to avoid giving too much weight for any single one, keeping the reading flow smooth.</p>
<p>It is also worth noting that successful lifting and lowering of DEX via MLIR remains a demo for now. Much work is needed in supporting the full instruction set of DEX as well as optimization of it.</p>
<p>I hope everyone enjoys.</p>
<h2 id="planning"><a href="#planning">Planning</a></h2>
<p>In analysing the DEX format, we need to parse the DEX file, construct a CFG (non-MLIR, and non-SSA), and then translate the CFG to MLIR's SSA CFG, apply some analysis, then <em>translate it to smali</em>, and then translate smali to dex (via 3rd party tool).</p>
<p>The reasoning for this is that smali is an easier output to work with than dex. In dex format, we need to maintain different tables of strings, types, methods and classes in the pre-header before we get to output the actual DEX [TODO_LINK_EDU_PHD].</p>
<p>In smali, all is resolved via text references instead. In such a short amount of time (~ 6 weeks), it's hard to achieve true circular transformation (DEX->MLIR->DEX). We therefore opt for (DEX->MLIR->smali->DEX) first (actually at the time of writing this (Dec 7th 2024), I'm even nervous to see if we can get DEX->MLIR->smali for submission).</p>
<p>With the naming of the MLIR's dialect being MjolnIR, the goal of the project is divided into two fronts:</p>
<ul>
<li>Achieve the circular transformation of: DEX -> MjolnIR (MLIR) -> Smali.</li>
<li>Survey some analysis/optimization provided by MLIR, using our new IR.</li>
</ul>
<p>In parsing the dex and constructing the CFG, the job was done by Edu prior to me joining the team. There was also an effort in lifting some subset of DEX to MLIR in the <a href="https://github.com/Fare9/KUNAI-static-analyzer">KUNAI</a> repo by Edu (recorded <a href="https://www.youtube.com/watch?v=hfqOivYdD40&#x26;ab_channel=LLVM">here</a>).</p>
<p>Therefore, my responsibilities in the project is to setup mlir, port over and maintain the lifting process of DEX, figure out the optimization and lowering.</p>
<p>The mermaid graph shown below details the steps we need to take in the project.</p>
<p>[TODO_INSERT_FLOWCHART_TD_ON_MERMAIDCHART.COM]</p>
<h3 id="mlirs-operations-and-values"><a href="#mlirs-operations-and-values">MLIR's operations and values</a></h3>
<h3 id="operations"><a href="#operations">Operations</a></h3>
<p>A section on MLIR high level overview structure not only helps readers understand the project's different playing parts but also helps reviewers of this document review my correct understanding of the project.</p>
<p>MLIR is built on top of these so-called operations
On the top level, the MLIR features a <code>ModuleOp</code>, which is a container operation of a single graph region.</p>
<p>A region is an ordered list of basic blocks. And a basic block is an ordered list of basic block.</p>
<p>In translating from our CFG's instructions to MLIR, we think of</p>
<ul>
<li>An input DEX file is comprised of ModuleOps</li>
<li>Each method in the DEX file is a ModuleOp</li>
<li>Each method might have control flows, which is made up with basic blocks.</li>
</ul>
<p>Although a simple 1-1 representation, MLIR can feature much more complex hierarchy, as demonstrated below:</p>
<p>[TODO_ADD_MLIR_DIAGRAM_1]</p>
<p>[TODO_ADD_MLIR_DIAGRAM_2]</p>
<h3 id="values"><a href="#values">Values</a></h3>
<p>An important thing to notice is how is SSA form represented in MLIR, which is done with <code>mlir::Value</code>. Given an operation such as the integer addition
<code>mlir::arith::AddIOp</code>, mlir gives us different accessors such as <code>getLhs()</code>, <code>getRhs</code>, `get</p>
<h2 id="parsing-cmdline-and-cmake"><a href="#parsing-cmdline-and-cmake">Parsing, cmdline and cmake</a></h2>
<p>Supposedly, the project will provide a command line tool for user to input in either a path to a DEX file or a folder of DEX file so that the tool can either lift and lower the DEX file(s).</p>
<p>The command line executable is hand-written, with the formatting job done via <a href="https://fmt.dev/11.0/">fmt</a>.</p>
<p>To maintain the build of the project, I opt for CMake, which is both Shuriken's build system and LLVM and MLIR's build system. This allows (somewhat) seamless connection between them.</p>
<h2 id="non-mlir-non-ssa-cfg-to-mlir-ssa-cfg"><a href="#non-mlir-non-ssa-cfg-to-mlir-ssa-cfg">Non-MLIR, NON-SSA CFG to MLIR-SSA CFG</a></h2>
<p>A special characteristic of DEX is that it utilizes (almost infinite) virtual registers without caring for stack space.
This allows for a seamless construction of the program's CFG from the DEX format.</p>
<p>After this we translate the NON-SSA CFG to MLIR's SSA CFG via Braun's SSA algorithm.</p>
<p>On the high level overview, we keep a map of integers to mlir::Value.
When the original CFG's instructions ask to either read or write to the variables, we either get the value from our map or
create a new value and map the integer variable to said value.</p>
<h2 id="optimization"><a href="#optimization">Optimization</a></h2>
<h2 id="translation"><a href="#translation">Translation</a></h2>
<p>In translating from MjolnIR to smali, I think two things that troubles me the most is that</p>
<ul>
<li>No project (to the best o our knowledge) translate from a custom format to smali.</li>
<li>Connecting a out-of-ssa translation to the mlir's infrastructure and realizing it to actually output smali.</li>
</ul>
<h2 id="other-contributions-to-project"><a href="#other-contributions-to-project">Other contributions to project</a></h2>
<h2 id="future-work"><a href="#future-work">Future work</a></h2>8:["$","article",null,{"className":"p-8 prose  max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"[REPORT] [ONGOING] Going to the gym with MLIR: Lifting and lowering Dex executable instructions"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"2024-12-07"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
c:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[REPORT] [ONGOING] Going to the gym with MLIR: Lifting and lowering Dex executable instructions"}],["$","meta","2",{"name":"description","content":"Built with NextJS, TailwindCSS, and a tonnn of loveee :)"}],["$","link","3",{"rel":"icon","href":"/_next/static/media/pfp3.5cd65164.png"}]]
a:null
